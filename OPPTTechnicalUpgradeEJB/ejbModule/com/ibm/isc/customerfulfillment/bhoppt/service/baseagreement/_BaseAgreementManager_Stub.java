// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.ibm.isc.customerfulfillment.bhoppt.service.baseagreement;

import com.ibm.isc.customerfulfillment.bhoppt.projectutilities.exception.ServiceException;
import com.ibm.isc.customerfulfillment.bhoppt.util.customdto.BaseAgreementChangeLogDetailsCustomDTO;
import com.ibm.isc.customerfulfillment.bhoppt.util.customdto.BaseAgreementCustomDTO;
import com.ibm.isc.customerfulfillment.bhoppt.util.customdto.BaseAgreementDetailsCustomDTO;
import com.ibm.isc.customerfulfillment.bhoppt.util.customdto.SearchBaseAgreementCustomDTO;
import java.lang.Object;
import java.lang.String;
import java.lang.Throwable;
import java.rmi.RemoteException;
import java.rmi.UnexpectedException;
import javax.ejb.EJBHome;
import javax.ejb.EJBObject;
import javax.ejb.Handle;
import javax.ejb.RemoveException;
import javax.rmi.CORBA.Stub;
import javax.rmi.CORBA.Util;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.ApplicationException;
import org.omg.CORBA.portable.InputStream;
import org.omg.CORBA.portable.OutputStream;
import org.omg.CORBA.portable.RemarshalException;
import org.omg.CORBA.portable.ServantObject;

public class _BaseAgreementManager_Stub extends Stub implements BaseAgreementManager {
    
    private static final String[] _type_ids = {
        "RMI:com.ibm.isc.customerfulfillment.bhoppt.service.baseagreement.BaseAgreementManager:0000000000000000", 
        "RMI:javax.ejb.EJBObject:0000000000000000"
    };
    
    public String[] _ids() { 
        return (String [] )  _type_ids.clone();
    }
    
    public EJBHome getEJBHome() throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("_get_EJBHome", true);
                        in = _invoke(out);
                        return (EJBHome) in.read_Object(EJBHome.class);
                    } catch (ApplicationException ex) {
                        in = ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("_get_EJBHome",javax.ejb.EJBObject.class);
                if (so == null) {
                    continue;
                }
                try {
                    EJBHome result = ((javax.ejb.EJBObject)so.servant).getEJBHome();
                    return (EJBHome)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public Object getPrimaryKey() throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("_get_primaryKey", true);
                        in = _invoke(out);
                        return Util.readAny(in);
                    } catch (ApplicationException ex) {
                        in = ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("_get_primaryKey",javax.ejb.EJBObject.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object result = ((javax.ejb.EJBObject)so.servant).getPrimaryKey();
                    return (Object)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void remove() throws RemoteException, RemoveException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("remove", true);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:javax/ejb/RemoveEx:1.0")) {
                            throw (RemoveException) in.read_value(RemoveException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("remove",javax.ejb.EJBObject.class);
                if (so == null) {
                    continue;
                }
                try {
                    ((javax.ejb.EJBObject)so.servant).remove();
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof RemoveException) {
                        throw (RemoveException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public Handle getHandle() throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("_get_handle", true);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (Handle) in.read_abstract_interface(Handle.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("_get_handle",javax.ejb.EJBObject.class);
                if (so == null) {
                    continue;
                }
                try {
                    Handle result = ((javax.ejb.EJBObject)so.servant).getHandle();
                    return (Handle)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public boolean isIdentical(EJBObject arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("isIdentical", true);
                        Util.writeRemoteObject(out,arg0);
                        in = _invoke(out);
                        return in.read_boolean();
                    } catch (ApplicationException ex) {
                        in = ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("isIdentical",javax.ejb.EJBObject.class);
                if (so == null) {
                    continue;
                }
                try {
                    EJBObject arg0Copy = (EJBObject) Util.copyObject(arg0,_orb());
                    return ((javax.ejb.EJBObject)so.servant).isIdentical(arg0Copy);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public SearchBaseAgreementCustomDTO getAllBaseAgreements(SearchBaseAgreementCustomDTO arg0) throws ServiceException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getAllBaseAgreements", true);
                        out.write_value(arg0,SearchBaseAgreementCustomDTO.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (SearchBaseAgreementCustomDTO) in.read_value(SearchBaseAgreementCustomDTO.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/ibm/isc/customerfulfillment/bhoppt/projectutilities/_exception/ServiceEx:1.0")) {
                            throw (ServiceException) in.read_value(ServiceException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getAllBaseAgreements",com.ibm.isc.customerfulfillment.bhoppt.service.baseagreement.BaseAgreementManager.class);
                if (so == null) {
                    continue;
                }
                try {
                    SearchBaseAgreementCustomDTO arg0Copy = (SearchBaseAgreementCustomDTO) Util.copyObject(arg0,_orb());
                    SearchBaseAgreementCustomDTO result = ((com.ibm.isc.customerfulfillment.bhoppt.service.baseagreement.BaseAgreementManager)so.servant).getAllBaseAgreements(arg0Copy);
                    return (SearchBaseAgreementCustomDTO)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ServiceException) {
                        throw (ServiceException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public BaseAgreementDetailsCustomDTO getBaseAgreement(BaseAgreementDetailsCustomDTO arg0) throws ServiceException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getBaseAgreement", true);
                        out.write_value(arg0,BaseAgreementDetailsCustomDTO.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (BaseAgreementDetailsCustomDTO) in.read_value(BaseAgreementDetailsCustomDTO.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/ibm/isc/customerfulfillment/bhoppt/projectutilities/_exception/ServiceEx:1.0")) {
                            throw (ServiceException) in.read_value(ServiceException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getBaseAgreement",com.ibm.isc.customerfulfillment.bhoppt.service.baseagreement.BaseAgreementManager.class);
                if (so == null) {
                    continue;
                }
                try {
                    BaseAgreementDetailsCustomDTO arg0Copy = (BaseAgreementDetailsCustomDTO) Util.copyObject(arg0,_orb());
                    BaseAgreementDetailsCustomDTO result = ((com.ibm.isc.customerfulfillment.bhoppt.service.baseagreement.BaseAgreementManager)so.servant).getBaseAgreement(arg0Copy);
                    return (BaseAgreementDetailsCustomDTO)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ServiceException) {
                        throw (ServiceException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public BaseAgreementDetailsCustomDTO registerBaseAgreement(BaseAgreementDetailsCustomDTO arg0) throws ServiceException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("registerBaseAgreement", true);
                        out.write_value(arg0,BaseAgreementDetailsCustomDTO.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (BaseAgreementDetailsCustomDTO) in.read_value(BaseAgreementDetailsCustomDTO.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/ibm/isc/customerfulfillment/bhoppt/projectutilities/_exception/ServiceEx:1.0")) {
                            throw (ServiceException) in.read_value(ServiceException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("registerBaseAgreement",com.ibm.isc.customerfulfillment.bhoppt.service.baseagreement.BaseAgreementManager.class);
                if (so == null) {
                    continue;
                }
                try {
                    BaseAgreementDetailsCustomDTO arg0Copy = (BaseAgreementDetailsCustomDTO) Util.copyObject(arg0,_orb());
                    BaseAgreementDetailsCustomDTO result = ((com.ibm.isc.customerfulfillment.bhoppt.service.baseagreement.BaseAgreementManager)so.servant).registerBaseAgreement(arg0Copy);
                    return (BaseAgreementDetailsCustomDTO)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ServiceException) {
                        throw (ServiceException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public BaseAgreementCustomDTO inActivateBaseAgreement(BaseAgreementCustomDTO arg0) throws ServiceException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("inActivateBaseAgreement", true);
                        out.write_value(arg0,BaseAgreementCustomDTO.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (BaseAgreementCustomDTO) in.read_value(BaseAgreementCustomDTO.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/ibm/isc/customerfulfillment/bhoppt/projectutilities/_exception/ServiceEx:1.0")) {
                            throw (ServiceException) in.read_value(ServiceException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("inActivateBaseAgreement",com.ibm.isc.customerfulfillment.bhoppt.service.baseagreement.BaseAgreementManager.class);
                if (so == null) {
                    continue;
                }
                try {
                    BaseAgreementCustomDTO arg0Copy = (BaseAgreementCustomDTO) Util.copyObject(arg0,_orb());
                    BaseAgreementCustomDTO result = ((com.ibm.isc.customerfulfillment.bhoppt.service.baseagreement.BaseAgreementManager)so.servant).inActivateBaseAgreement(arg0Copy);
                    return (BaseAgreementCustomDTO)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ServiceException) {
                        throw (ServiceException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public BaseAgreementDetailsCustomDTO amendBaseAgreement(BaseAgreementDetailsCustomDTO arg0) throws ServiceException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("amendBaseAgreement", true);
                        out.write_value(arg0,BaseAgreementDetailsCustomDTO.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (BaseAgreementDetailsCustomDTO) in.read_value(BaseAgreementDetailsCustomDTO.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/ibm/isc/customerfulfillment/bhoppt/projectutilities/_exception/ServiceEx:1.0")) {
                            throw (ServiceException) in.read_value(ServiceException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("amendBaseAgreement",com.ibm.isc.customerfulfillment.bhoppt.service.baseagreement.BaseAgreementManager.class);
                if (so == null) {
                    continue;
                }
                try {
                    BaseAgreementDetailsCustomDTO arg0Copy = (BaseAgreementDetailsCustomDTO) Util.copyObject(arg0,_orb());
                    BaseAgreementDetailsCustomDTO result = ((com.ibm.isc.customerfulfillment.bhoppt.service.baseagreement.BaseAgreementManager)so.servant).amendBaseAgreement(arg0Copy);
                    return (BaseAgreementDetailsCustomDTO)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ServiceException) {
                        throw (ServiceException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public BaseAgreementDetailsCustomDTO validateAgreementHeader(BaseAgreementDetailsCustomDTO arg0) throws ServiceException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("validateAgreementHeader", true);
                        out.write_value(arg0,BaseAgreementDetailsCustomDTO.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (BaseAgreementDetailsCustomDTO) in.read_value(BaseAgreementDetailsCustomDTO.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/ibm/isc/customerfulfillment/bhoppt/projectutilities/_exception/ServiceEx:1.0")) {
                            throw (ServiceException) in.read_value(ServiceException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("validateAgreementHeader",com.ibm.isc.customerfulfillment.bhoppt.service.baseagreement.BaseAgreementManager.class);
                if (so == null) {
                    continue;
                }
                try {
                    BaseAgreementDetailsCustomDTO arg0Copy = (BaseAgreementDetailsCustomDTO) Util.copyObject(arg0,_orb());
                    BaseAgreementDetailsCustomDTO result = ((com.ibm.isc.customerfulfillment.bhoppt.service.baseagreement.BaseAgreementManager)so.servant).validateAgreementHeader(arg0Copy);
                    return (BaseAgreementDetailsCustomDTO)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ServiceException) {
                        throw (ServiceException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public BaseAgreementChangeLogDetailsCustomDTO getBaseAgreementChangeLogDetails(BaseAgreementChangeLogDetailsCustomDTO arg0) throws ServiceException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getBaseAgreementChangeLogDetails", true);
                        out.write_value(arg0,BaseAgreementChangeLogDetailsCustomDTO.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (BaseAgreementChangeLogDetailsCustomDTO) in.read_value(BaseAgreementChangeLogDetailsCustomDTO.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/ibm/isc/customerfulfillment/bhoppt/projectutilities/_exception/ServiceEx:1.0")) {
                            throw (ServiceException) in.read_value(ServiceException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getBaseAgreementChangeLogDetails",com.ibm.isc.customerfulfillment.bhoppt.service.baseagreement.BaseAgreementManager.class);
                if (so == null) {
                    continue;
                }
                try {
                    BaseAgreementChangeLogDetailsCustomDTO arg0Copy = (BaseAgreementChangeLogDetailsCustomDTO) Util.copyObject(arg0,_orb());
                    BaseAgreementChangeLogDetailsCustomDTO result = ((com.ibm.isc.customerfulfillment.bhoppt.service.baseagreement.BaseAgreementManager)so.servant).getBaseAgreementChangeLogDetails(arg0Copy);
                    return (BaseAgreementChangeLogDetailsCustomDTO)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ServiceException) {
                        throw (ServiceException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public BaseAgreementCustomDTO reActivateBaseAgreement(BaseAgreementCustomDTO arg0) throws ServiceException, RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("reActivateBaseAgreement", true);
                        out.write_value(arg0,BaseAgreementCustomDTO.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (BaseAgreementCustomDTO) in.read_value(BaseAgreementCustomDTO.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:com/ibm/isc/customerfulfillment/bhoppt/projectutilities/_exception/ServiceEx:1.0")) {
                            throw (ServiceException) in.read_value(ServiceException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("reActivateBaseAgreement",com.ibm.isc.customerfulfillment.bhoppt.service.baseagreement.BaseAgreementManager.class);
                if (so == null) {
                    continue;
                }
                try {
                    BaseAgreementCustomDTO arg0Copy = (BaseAgreementCustomDTO) Util.copyObject(arg0,_orb());
                    BaseAgreementCustomDTO result = ((com.ibm.isc.customerfulfillment.bhoppt.service.baseagreement.BaseAgreementManager)so.servant).reActivateBaseAgreement(arg0Copy);
                    return (BaseAgreementCustomDTO)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof ServiceException) {
                        throw (ServiceException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
}
